# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C9xxAwuP-5i0PrTBCe-yCL17zSdyqBgv
"""

import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import load_model

# Load model once globally (optional optimization)
MODEL_PATH = 'models/brain_tumor_model.h5'
model = load_model(MODEL_PATH)

# Class index to label mapping
class_labels = {
    0: "No Tumor",
    1: "Tumor"
}

def preprocess_image(img_path, target_size=(150, 150)):
    """
    Load and preprocess an image for prediction.

    Args:
        img_path (str): Path to the image file.
        target_size (tuple): Desired image dimensions.

    Returns:
        np.array: Preprocessed image tensor.
    """
    img = image.load_img(img_path, target_size=target_size)
    img_array = image.img_to_array(img)
    img_array = img_array / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

def predict_tumor(img_path):
    """
    Predict tumor presence from image.

    Args:
        img_path (str): Path to the input image.

    Returns:
        str: Predicted class label.
        float: Prediction confidence (0 to 100%).
    """
    img = preprocess_image(img_path)
    predictions = model.predict(img)[0]
    predicted_class = np.argmax(predictions)
    confidence = float(np.max(predictions)) * 100
    label = class_labels[predicted_class]
    return label, confidence